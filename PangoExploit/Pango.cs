namespace PangoExploit
{
    using System.ComponentModel;
    using System.ComponentModel.Composition;
    using System.Linq;

    using Ensage;
    using Ensage.Common.Menu;
    using Ensage.SDK.Abilities.npc_dota_hero_pangolier;
    using Ensage.SDK.Extensions;
    using Ensage.SDK.Helpers;
    using Ensage.SDK.Menu;
    using Ensage.SDK.Service;
    using Ensage.SDK.Service.Metadata;

    [ExportPlugin("Pango Exploit", HeroId.npc_dota_hero_pangolier)]
    internal class Pango : Plugin
    {
        private readonly Unit owner;

        private readonly pangolier_swashbuckle swashbuckle;

        private MenuItem<KeyBind> escape;

        private MenuFactory menu;

        [ImportingConstructor]
        public Pango(IServiceContext context)
        {
            owner = context.Owner;
            swashbuckle = context.AbilityFactory.GetAbility<pangolier_swashbuckle>();
        }

        protected override void OnActivate()
        {
            menu = MenuFactory.CreateWithTexture("Pango", owner.Name);
            escape = menu.Item("Escape key", new KeyBind('F'));
            escape.PropertyChanged += OnPropertyChanged;
            Player.OnExecuteOrder += PlayerOnExecuteOrder;
        }

        protected override void OnDeactivate()
        {
            escape.PropertyChanged -= OnPropertyChanged;
            Player.OnExecuteOrder -= PlayerOnExecuteOrder;
            menu.Dispose();
        }

        private void OnPropertyChanged(object sender, PropertyChangedEventArgs propertyChangedEventArgs)
        {
            if (!escape || !swashbuckle.CanBeCasted)
            {
                return;
            }

            var fountain = EntityManager<Unit>.Entities.FirstOrDefault(x => x.IsValid && x.IsAlly(owner) && x.Name == "dota_fountain");
            if (fountain == null || fountain.Distance2D(owner) < 2000)
            {
                return;
            }

            swashbuckle.Ability.TargetPosition(fountain.Position.Extend(owner.Position, 400));
            swashbuckle.Ability.TargetPosition(fountain.Position.Extend(owner.Position, 600));
            swashbuckle.Ability.UseAbility(owner.Position);
        }

        private void PlayerOnExecuteOrder(Player sender, ExecuteOrderEventArgs args)
        {
            if (!args.Entities.Contains(owner) || args.OrderId != OrderId.AbilityLocation || !args.IsPlayerInput
                || args.Ability.Id != swashbuckle.Ability.Id)
            {
                return;
            }

            swashbuckle.Ability.UseAbility(owner.Position);
            args.Process = false;
        }
    }
}