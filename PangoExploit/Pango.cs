namespace PangoExploit
{
    using System.ComponentModel.Composition;
    using System.Linq;

    using Ensage;
    using Ensage.SDK.Abilities.npc_dota_hero_pangolier;
    using Ensage.SDK.Service;
    using Ensage.SDK.Service.Metadata;

    using SharpDX;

    [ExportPlugin("Pango Exploit", HeroId.npc_dota_hero_pangolier)]
    internal class Pango : Plugin
    {
        private readonly Unit owner;

        private readonly pangolier_swashbuckle swashbuckle;

        private Vector3 endPosition;

        private int param;

        private Vector3 startPosition;

        [ImportingConstructor]
        public Pango(IServiceContext context)
        {
            owner = context.Owner;
            swashbuckle = context.AbilityFactory.GetAbility<pangolier_swashbuckle>();
        }

        protected override void OnActivate()
        {
            Player.OnExecuteOrder += PlayerOnExecuteOrder;
        }

        protected override void OnDeactivate()
        {
            Player.OnExecuteOrder -= PlayerOnExecuteOrder;
        }

        private void PlayerOnExecuteOrder(Player sender, ExecuteOrderEventArgs args)
        {
            if (!args.Entities.Contains(owner) || args.Ability?.Id != swashbuckle.Ability.Id)
            {
                return;
            }

            if (args.OrderId == OrderId.VectorTargetPosition)
            {
                switch (param++)
                {
                    case 0:
                    {
                        startPosition = args.TargetPosition;
                        break;
                    }
                    case 1:
                    {
                        endPosition = args.TargetPosition;
                        break;
                    }
                }
                args.Process = false;
            }
            else if (args.OrderId == OrderId.AbilityLocation)
            {
                swashbuckle.Ability.TargetPosition(startPosition, false, true);
                swashbuckle.Ability.TargetPosition(endPosition, false, true);
                swashbuckle.Ability.UseAbility(owner.Position, false, true);
                args.Process = false;
                param = 0;
            }
        }
    }
}